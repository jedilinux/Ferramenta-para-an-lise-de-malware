import pefile

# Caminho pro arquivo PE, na moral
file_path = "/home/kali/Desktop/malware/b999f9e1304b141dbdf8be75e71f0b0792bcaf7b168d5a4c3f3bce174d3edaee.exe"

# Carrega o arquivo PE, tipo gangsta
pe = pefile.PE(file_path)

# Exibir as paradas do DOS Header
print("DOS Header:")
print(f"Magic Number: {hex(pe.DOS_HEADER.e_magic)}")  # Número mágico do rolê
print(f"Offset pra PE Header: {hex(pe.DOS_HEADER.e_lfanew)}\n")  # Offset do PE Header

# Exibir as paradas do PE Header
print("PE Header:")
print(f"Assinatura: {hex(pe.NT_HEADERS.Signature)}")  # Assinatura PE, saca?
print(f"Máquina: {hex(pe.FILE_HEADER.Machine)}")  # Máquina do esquema
print(f"Número de Seções: {pe.FILE_HEADER.NumberOfSections}")  # Quantas seções tem
print(f"TimeDateStamp: {hex(pe.FILE_HEADER.TimeDateStamp)}\n")  # Data e hora do crime

# Exibir as paradas do Optional Header
print("Optional Header:")
print(f"Endereço de Entrada: {hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint)}")  # Entrada do rolê
print(f"Imagem Base: {hex(pe.OPTIONAL_HEADER.ImageBase)}")  # Base da imagem
print(f"Tamanho do Código: {pe.OPTIONAL_HEADER.SizeOfCode}\n")  # Tamanho do código

# Listar seções, tipo as áreas do território
print("Seções:")
for section in pe.sections:
    print(f"Nome da Seção: {section.Name.decode().strip()}")  # Nome da seção
    print(f"Tamanho Virtual: {hex(section.Misc_VirtualSize)}")  # Tamanho virtual
    print(f"Tamanho em Disco: {hex(section.SizeOfRawData)}")  # Tamanho em disco
    print(f"Endereço Virtual: {hex(section.VirtualAddress)}\n")  # Endereço virtual

# Exibir a Tabela de Importação, tipo quem é aliado
if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
    print("Tabela de Importação:")
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        dll_name = entry.dll.decode() if entry.dll else "N/A"
        print(f"Nome da DLL: {dll_name}")  # Nome da DLL, mano
        for imp in entry.imports:
            func_name = imp.name.decode() if imp.name else "N/A"
            print(f"\tFunção: {func_name} Endereço: {hex(imp.address)}")  # Função e endereço
else:
    print("Nenhuma tabela de importação encontrada.")  # Se não achar nada

# Exibir recursos, se tiver, tipo os bens do bairro
if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE'):
    print("\nRecursos:")
    for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
        type_name = resource_type.name.decode() if resource_type.name else str(resource_type.struct.Id)
        print(f"Tipo de Recurso: {type_name}")  # Tipo de recurso
        for resource_id in resource_type.directory.entries:
            for resource_lang in resource_id.directory.entries:
                data_rva = resource_lang.data.struct.OffsetToData
                size = resource_lang.data.struct.Size
                print(f"Recurso ID: {resource_id.id}")  # ID do recurso
                print(f"Idioma: {resource_lang.id}")  # Idioma
                print(f"Tamanho: {size}")  # Tamanho do recurso
                print(f"Offset: {hex(data_rva)}\n")  # Offset do recurso
else:
    print("Nenhum recurso encontrado.")  # Se não tiver nada
